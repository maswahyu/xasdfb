@import "linear-channel-table";

/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */

@function luminance($color) {
  $red: nth($linear-channel-values, red($color) + 1);
  $green: nth($linear-channel-values, green($color) + 1);
  $blue: nth($linear-channel-values, blue($color) + 1);
  @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
}

/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */

@function contrast($back, $front) {
  $backLum: luminance($back) + 0.05;
  $foreLum: luminance($front) + 0.05;
  @return max($backLum, $foreLum) / min($backLum, $foreLum);
}

/**
 * Determine whether to use dark or light text on top of given color.
 * Returns black for dark text and white for light text.
 */

@function choose-contrast-color($color) {
  $lightContrast: contrast($color, white);
  $darkContrast: contrast($color, black);
  @if ($lightContrast > $darkContrast) {
    @return "light";
  } @else {
    @return "dark";
  }
}

/*
Default Color Palette
========================================================*/
$palette: () !default;

$palette: map-merge(
  (
    "white": #ffffff,
    "black": #000000
  ),
  $palette
);

@function palette($colorName: "white") {
    @return map-get($palette, $colorName);
}

@mixin elevation($level) {
  -webkit-box-shadow: 0 0 (3px * $level) (3px * $level) rgba(palette("gray"), 0.2);
  -moz-box-shadow: 0 0 (3px * $level) (3px * $level) rgba(palette("gray"), 0.2);
  box-shadow: 0 0 (3px * $level) (3px * $level) rgba(palette("gray"), 0.2);
}

@mixin hideElevation() {
  -webkit-box-shadow: none;
  -moz-box-shadow: none;
  box-shadow: none;
}
