/*
Default vars for unit calculation
========================================================*/
$base-font-size: 10px !default;

/*
Strip unit i.e 10px => 10
========================================================*/

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

/*
Return rem size from px based on baseline
========================================================*/

@function rem-calc($size, $base: $base-font-size) {
  $remSize: strip-unit($size) / strip-unit($base);
  @return #{$remSize}rem;
}

/*
Return em size from px
========================================================*/

@function em-calc($size, $parentBase: $base-font-size) {
  $emSize: strip-unit($size) / strip-unit($parentBase);
  @return #{$emSize}em;
}

/*
Type checking functions
========================================================*/

@function is-number($value) {
  @return type-of($value) == "number";
}

@function is-time($value) {
  @return is-number($value) and index("ms" "s", unit($value)) != null;
}

@function is-duration($value) {
  @return is-time($value);
}

@function is-angle($value) {
  @return is-number($value) and index("deg" "rad" "grad" "turn", unit($value))
    != null;
}

@function is-frequency($value) {
  @return is-number($value) and index("Hz" "kHz", unit($value)) != null;
}

@function is-integer($value) {
  @return is-number($value) and round($value) == $value;
}

@function is-relative-length($value) {
  @return is-number($value) and
    index("em" "ex" "ch" "rem" "vw" "vh" "vmin" "vmax", unit($value)) != null;
}

@function is-absolute-length($value) {
  @return is-number($value) and
    index("cm" "mm" "in" "px" "pt" "pc", unit($value)) != null;
}

@function is-percentage($value) {
  @return is-number($value) and unit($value) == "%";
}

@function is-length($value) {
  @return is-relative-length($value) or is-absolute-length($value);
}

@function is-resolution($value) {
  @return is-number($value) and index("dpi" "dpcm" "dppx", unit($value)) != null;
}

@function is-position($value) {
  @return is-length($value) or is-percentage($value) or
    index("top" "right" "bottom" "left" "center", $value) != null;
}

/*
 Round a number to specified digits.

 @param  {Number} $number A number to round
 @param  {Number} [$digits:0] Digits to output
 @param  {String} [$mode:round] (round|ceil|floor) How to round a number
 @return {Number} A rounded number
 @example
     decimal-round(0.333)    => 0
     decimal-round(0.333, 1) => 0.3
     decimal-round(0.333, 2) => 0.33
========================================================*/

@function decimal-round($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @for $i from 1 through $digits {
    $n: $n * 10;
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

/*
 Ceil a number to specified digits.

 @param  {Number} $number A number to round
 @param  {Number} [$digits:0] Digits to output
 @return {Number} A ceiled number
 @example
     decimal-ceil(0.333)    => 1
     decimal-ceil(0.333, 1) => 0.4
     decimal-ceil(0.333, 2) => 0.34
========================================================*/

@function decimal-ceil($number, $digits: 0) {
  @return decimal-round($number, $digits, ceil);
}

/*
 Floor a number to specified digits.

 @param  {Number} $number A number to round
 @param  {Number} [$digits:0] Digits to output
 @return {Number} A floored number
 @example
     decimal-floor(0.333)    => 0
     decimal-floor(0.333, 1) => 0.3
     decimal-floor(0.333, 2) => 0.33
========================================================*/

@function decimal-floor($number, $digits: 0) {
  @return decimal-round($number, $digits, floor);
}

/*
Get column width in percentage
========================================================*/
@function span($span, $totalCol: 12) {
  @return decimal-floor($span/$totalCol * 100%);
}

/*
Get line height
by calculating font size and container height
========================================================*/
@function getLineHeight($containerHeight, $fontSize) {
  @return strip-unit($containerHeight) / strip-unit($fontSize);
}
